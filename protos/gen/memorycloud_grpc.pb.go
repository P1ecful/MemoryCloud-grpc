// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: proto/proto/memorycloud.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MemoryCloud_Create_FullMethodName = "/memorycloud.MemoryCloud/Create"
	MemoryCloud_Delete_FullMethodName = "/memorycloud.MemoryCloud/Delete"
)

// MemoryCloudClient is the client API for MemoryCloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemoryCloudClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error)
}

type memoryCloudClient struct {
	cc grpc.ClientConnInterface
}

func NewMemoryCloudClient(cc grpc.ClientConnInterface) MemoryCloudClient {
	return &memoryCloudClient{cc}
}

func (c *memoryCloudClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MemoryCloud_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryCloudClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MemoryCloud_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemoryCloudServer is the server API for MemoryCloud service.
// All implementations must embed UnimplementedMemoryCloudServer
// for forward compatibility
type MemoryCloudServer interface {
	Create(context.Context, *CreateRequest) (*Response, error)
	Delete(context.Context, *DeleteRequest) (*Response, error)
	mustEmbedUnimplementedMemoryCloudServer()
}

// UnimplementedMemoryCloudServer must be embedded to have forward compatible implementations.
type UnimplementedMemoryCloudServer struct {
}

func (UnimplementedMemoryCloudServer) Create(context.Context, *CreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMemoryCloudServer) Delete(context.Context, *DeleteRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMemoryCloudServer) mustEmbedUnimplementedMemoryCloudServer() {}

// UnsafeMemoryCloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemoryCloudServer will
// result in compilation errors.
type UnsafeMemoryCloudServer interface {
	mustEmbedUnimplementedMemoryCloudServer()
}

func RegisterMemoryCloudServer(s grpc.ServiceRegistrar, srv MemoryCloudServer) {
	s.RegisterService(&MemoryCloud_ServiceDesc, srv)
}

func _MemoryCloud_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryCloudServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryCloud_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryCloudServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryCloud_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryCloudServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryCloud_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryCloudServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemoryCloud_ServiceDesc is the grpc.ServiceDesc for MemoryCloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemoryCloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "memorycloud.MemoryCloud",
	HandlerType: (*MemoryCloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MemoryCloud_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MemoryCloud_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto/memorycloud.proto",
}
